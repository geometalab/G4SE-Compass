#!/usr/bin/env python
# -*- coding: utf-8 -*-

# CAVEAT UTILITOR
#
# This file was automatically generated by Grako.
#
#    https://pypi.python.org/pypi/grako/
#
# Any changes you make to it will be overwritten the next time
# the file is generated.


from __future__ import print_function, division, absolute_import, unicode_literals

from grako.buffering import Buffer
from grako.parsing import graken, Parser
from grako.util import re, RE_FLAGS, generic_main  # noqa


__version__ = (2016, 9, 21, 7, 56, 50, 2)

__all__ = [
    'UnknownParser',
    'UnknownSemantics',
    'main'
]

KEYWORDS = set([])


class UnknownBuffer(Buffer):
    def __init__(self,
                 text,
                 whitespace=None,
                 nameguard=None,
                 comments_re=None,
                 eol_comments_re=None,
                 ignorecase=None,
                 namechars='',
                 **kwargs):
        super(UnknownBuffer, self).__init__(
            text,
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            namechars=namechars,
            **kwargs
        )


class UnknownParser(Parser):
    def __init__(self,
                 whitespace=None,
                 nameguard=None,
                 comments_re=None,
                 eol_comments_re=None,
                 ignorecase=None,
                 left_recursion=True,
                 parseinfo=True,
                 keywords=KEYWORDS,
                 namechars='',
                 **kwargs):
        super(UnknownParser, self).__init__(
            whitespace=whitespace,
            nameguard=nameguard,
            comments_re=comments_re,
            eol_comments_re=eol_comments_re,
            ignorecase=ignorecase,
            left_recursion=left_recursion,
            parseinfo=parseinfo,
            keywords=keywords,
            namechars=namechars,
            **kwargs
        )

    def parse(self, text, *args, **kwargs):
        if not isinstance(text, Buffer):
            text = UnknownBuffer(text, **kwargs)
        return super(UnknownParser, self).parse(text, *args, **kwargs)

    @graken()
    def _start_(self):
        self._search_query_()
        self._check_eof()

    @graken()
    def _search_query_(self):
        with self._choice():
            with self._option():
                self._combined_query_()
            with self._option():
                self._search_term_()
            with self._option():
                self._parenthesized_query_()
            self._error('no available options')

    @graken()
    def _parenthesized_query_(self):
        self._token('(')
        with self._choice():
            with self._option():
                self._combined_query_()
            with self._option():
                self._search_term_()
            with self._option():
                self._parenthesized_query_()
            self._error('no available options')

        self.name_last_node('@')
        self._token(')')

    @graken()
    def _combined_query_(self):
        self._search_query_()
        self._BIN_OP_()
        self._search_query_()

    @graken()
    def _search_term_(self):
        with self._optional():
            self._unary_op_()
        self._search_word_()

    @graken()
    def _search_word_(self):
        with self._choice():
            with self._option():
                self._quoted_string_()
            with self._option():
                self._literal_search_word_()
            self._error('no available options')

    @graken()
    def _quoted_string_(self):
        self._pattern(r'(?:"(?:[^"\n\r\\]|(?:"")|(?:\\x[0-9a-fA-F]+)|(?:\\.))*")|(?:\'(?:[^\'\n\r\\]|(?:\'\')|(?:\\x[0-9a-fA-F]+)|(?:\\.))*\')')

    @graken()
    def _literal_search_word_(self):
        self._pattern(r'\w+')

    @graken()
    def _BIN_OP_(self):
        with self._choice():
            with self._option():
                self._OR_OP_()
            with self._option():
                self._AND_OP_()
            self._error('no available options')

    @graken()
    def _AND_OP_(self):
        with self._choice():
            with self._option():
                self._ampersand_()
            with self._option():
                self._pattern(r'\s')
            self._error('expecting one of: \\s')

    @graken()
    def _ampersand_(self):
        self._token('&')

    @graken()
    def _OR_OP_(self):
        self._pipe_()

    @graken()
    def _pipe_(self):
        self._token('|')

    @graken()
    def _unary_op_(self):
        self._token('!')


class UnknownSemantics(object):
    def start(self, ast):
        return ast

    def search_query(self, ast):
        return ast

    def parenthesized_query(self, ast):
        return ast

    def combined_query(self, ast):
        return ast

    def search_term(self, ast):
        return ast

    def search_word(self, ast):
        return ast

    def quoted_string(self, ast):
        return ast

    def literal_search_word(self, ast):
        return ast

    def BIN_OP(self, ast):
        return ast

    def AND_OP(self, ast):
        return ast

    def ampersand(self, ast):
        return ast

    def OR_OP(self, ast):
        return ast

    def pipe(self, ast):
        return ast

    def unary_op(self, ast):
        return ast


def main(
        filename,
        startrule,
        trace=False,
        whitespace=None,
        nameguard=None,
        comments_re=None,
        eol_comments_re=None,
        ignorecase=None,
        left_recursion=True,
        parseinfo=True,
        **kwargs):

    with open(filename) as f:
        text = f.read()
    whitespace = whitespace or None
    parser = UnknownParser(parseinfo=False)
    ast = parser.parse(
        text,
        startrule,
        filename=filename,
        trace=trace,
        whitespace=whitespace,
        nameguard=nameguard,
        ignorecase=ignorecase,
        **kwargs)
    return ast

if __name__ == '__main__':
    import json
    ast = generic_main(main, UnknownParser, name='Unknown')
    print('AST:')
    print(ast)
    print()
    print('JSON:')
    print(json.dumps(ast, indent=2))
    print()
